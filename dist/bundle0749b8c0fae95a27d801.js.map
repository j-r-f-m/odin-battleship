{"version":3,"file":"bundle0749b8c0fae95a27d801.js","mappings":";;;;;;;;;;;;;;AAAA,YAAY,OAAO;;AAEnB;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM,kDAAkD;AACxD,MAAM,+CAA+C;AACrD,MAAM,+CAA+C;AACrD,MAAM,iDAAiD;AACvD,MAAM,8CAA8C;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA,oBAAoB,gBAAgB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,QAAQ;;AAEnB;AACA;AACA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEqB;;;;;;;;;;;;;;;;AC3MmB;;AAExC;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEgB;;;;;;;UC1ChB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNA;AACsC;;AAEtC;;AAEU","sources":["webpack://odin-battleship/./src/gameboard.js","webpack://odin-battleship/./src/ships.js","webpack://odin-battleship/webpack/bootstrap","webpack://odin-battleship/webpack/runtime/define property getters","webpack://odin-battleship/webpack/runtime/hasOwnProperty shorthand","webpack://odin-battleship/webpack/runtime/make namespace object","webpack://odin-battleship/./src/index.js"],"sourcesContent":["// import { Ship } from \"./ships\";\n\n/**\n * create a ship and pass its length\n * @param {integer} length of ship\n */\nfunction Ship(length, name) {\n  this.length = length;\n  this.isSunk = false;\n  this.hitCount = 0;\n  this.direction = \"inX\";\n  this.coordinates = null;\n  this.name = name;\n}\n\n/**\n * increase hitcount\n */\nShip.prototype.hit = function () {\n  this.hitCount = this.hitCount + 1;\n};\n\n/**\n * checks if boat has sunk\n */\nShip.prototype.sunk = function () {\n  if (this.hitCount >= this.length) {\n    this.isSunk = true;\n  }\n};\n\nfunction Gameboard() {\n  /** ----------------------------Properties ----------------------------- */\n  // array containing dummy objects that represent all the ships a player has\n  // whenever a player places a ship the first element of the array will be removed\n  this.availableShips = [\n    { name: \"Patrol Boat\", length: 2, direction: \"inX\" },\n    { name: \"Cruiser1\", length: 3, direction: \"inX\" },\n    { name: \"Cruiser2\", length: 3, direction: \"inX\" },\n    { name: \"Battleship\", length: 4, direction: \"inX\" },\n    { name: \"Carrier\", length: 5, direction: \"inX\" },\n  ];\n\n  // placed ships\n  this.placedShips = [];\n  // default placing direction\n  this.placingDirection = \"inX\";\n  //\n  this.shotsMissed = [];\n  this.shotsHit = [];\n}\n\n/** ---------------------------------- METHODS ------------------------------ */\n\n/**\n * places a ship on the gameboard starting from the coordinates a player clicked\n * on\n * @param {array} startCoor contians coordinates player clicked on\n * return array with palced ships\n */\nGameboard.prototype.placeShips = function (startCoor) {\n  // create instance of ship\n  let currShip = new Ship(\n    this.availableShips[0].length,\n    this.availableShips[0].name\n  );\n  //   console.log(currShip.hit);\n  /**\n   * calculates the coordinates the ship occupies\n   * if a player clicks on a starting point that would place parts of the ship\n   * outside of the board calculate() returns a string\n   */\n  currShip.coordinates = this.calculate(startCoor, currShip.length);\n  // if ship placement is legal place ship and return array with all placed ships\n  // if ship placement is illegal reutrn false\n  if (currShip.coordinates !== false) {\n    this.availableShips.shift();\n    this.placedShips.push(currShip);\n    return this.placedShips;\n  } else if (currShip.coordinates === false) {\n    return false;\n  }\n};\n\n/**\n * depending on the palcingDirection of the gameboard a player can place a ship\n *\n * @param {array} startCoor contains coordinates player clicked on\n * @param {integer} shipLength length of ship that player wants to place\n * @returns array with all coordinates the ship occupies or string that points\n * out that placement is illegal\n */\nGameboard.prototype.calculate = function (startCoor, shipLength) {\n  // array that contains all the coordinates the ship occupies\n  const shipCoor = [];\n  // calculate endpoint of ship that player wants to place\n  // check of all parts of the ship will be on the board\n  const endPointX = startCoor[0] + shipLength;\n  const endPointY = startCoor[1] + shipLength;\n  // check for illegal moves\n  if (this.placingDirection === \"inX\" && endPointX > 10) {\n    return false;\n  } else if (this.placingDirection === \"inY\" && endPointY > 10) {\n    return false;\n  } else if (this.placingDirection === \"inX\") {\n    // calculate all coordinates that ship will occupy in X-direction\n    for (let i = 0; i < shipLength; i++) {\n      let currCoor = [startCoor[0] + i, startCoor[1]];\n      shipCoor.push(currCoor);\n    }\n    return shipCoor;\n  } else if (this.placingDirection === \"inY\") {\n    // calculate all coordinates that ship will occupy in Y-direction\n    for (let i = 0; i < shipLength; i++) {\n      let currCoor = [startCoor[0], startCoor[1] + i];\n      shipCoor.push(currCoor);\n    }\n    return shipCoor;\n  }\n};\n\n/**\n *\n * @param {array} targetCoor x- and y-coordinates of tile that user fired on\n * @returns ship object that got hit or null if no ship was hit\n */\nGameboard.prototype.searchShips = function (targetCoor) {\n  for (let i = 0; i < this.placedShips.length; i++) {\n    // coordinate array of current ship object\n    let currCoor = this.placedShips[i].coordinates;\n    for (let j = 0; j < currCoor.length; j++) {\n      // if target hits\n      if (\n        currCoor[j][0] === targetCoor[0] &&\n        currCoor[j][1] === targetCoor[1]\n      ) {\n        // if target hits a ship return that ship\n        return this.placedShips[i];\n      }\n    }\n  }\n  // if shot misses\n  return null;\n};\n\n/**\n * delete ship that was destroyed from placedShip-array\n * @param {string} nameShip name of ship that was destroyed \n\n */\nGameboard.prototype.deleteShip = function (nameShip) {\n  for (let i = 0; i < this.placedShips.length; i++) {\n    if (this.placedShips[i].name === nameShip) {\n      this.placedShips.splice(i, 1);\n    }\n  }\n  return this.placedShips;\n};\n\nGameboard.prototype.receiveAttack = function (targetCoor) {\n  // search all placed ships for matching coordinates\n  let targetHit = this.searchShips(targetCoor);\n\n  if (targetHit === null) {\n    // shot missed\n    // mark tile in dom with an x\n    // push coordinates that missed into an array\n    this.shotsMissed.push(targetCoor);\n    return null;\n  } else {\n    // shot hit\n    this.shotsHit.push(targetCoor);\n    // mark tile in dom\n    console.log(targetHit.hit);\n    targetHit.hit();\n    targetHit.sunk();\n    if (targetHit.isSunk === true) {\n      // delete ship from placedShip array\n      this.deleteShip(targetHit.name);\n    }\n  }\n\n  if (this.placedShips.length === 0) {\n    // end game\n  }\n  return this.placedShips;\n};\n\nlet board = new Gameboard();\nboard.placeShips([2, 2]);\nboard.placeShips([2, 4]);\nboard.placeShips([2, 6]);\nboard.placeShips([2, 8]);\nboard.placeShips([2, 10]);\n\nboard.receiveAttack([2, 2]);\nboard.receiveAttack([3, 2]);\nconsole.log(board.shotsMissed);\nconsole.log(board.shotsHit);\n\nconsole.log(board);\n// console.log(\"asdfassadfasdf\");\n\nexport { Gameboard };\n","import { Gameboard } from \"./gameboard\";\n\n// Exporting the constructor function did not export the pbject methods need some fix\n\n/**\n * create a ship and pass its length\n * @param {integer} length of ship\n */\nfunction Ship(length, name) {\n  this.length = length;\n  this.isSunk = false;\n  this.hitCount = 0;\n  this.direction = \"inX\";\n  this.coordinates = null;\n  this.name = name;\n}\n\n/**\n * increase hitcount\n */\nShip.prototype.hit = function () {\n  this.hitCount = this.hitCount + 1;\n};\n\n/**\n * checks if boat has sunk\n */\nShip.prototype.sunk = function () {\n  if (this.hitCount >= this.length) {\n    this.isSunk = true;\n  }\n};\n\n// ---------------- TEST ----------------------\n\n// let testShip = new Ship(2);\n// console.log(testShip.hit);\n\n// let testGameboard = new Gameboard();\n// let test = testGameboard.calculate([1, 3], 2);\n// console.log(test);\n\nexport { Ship };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import \"./styles.css\";\nimport { shipFact } from \"./ships.js\";\n\nconsole.log(\"hello worl22asdas2sd\");\n\nexport {};\n"],"names":[],"sourceRoot":""}